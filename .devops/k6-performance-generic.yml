# Generic pipeline to execute k6 scripts with environment-driven configuration

trigger: none

pool:
  vmImage: ubuntu-22.04

parameters:

  - name: 'PIPELINE_NAME_PREFIX'
    displayName: '(Optional) pipeline run name prefix'
    type: string
    default: '-'

  - name: 'k6_running_mode'
    displayName: 'k6 execution mode'
    type: string
    default: 'simple'
    values:
      - 'simple'
      - 'managed'

  - name: 'K6_SCRIPT_PATH'
    displayName: 'k6 script path to execute'
    type: string
    default: 'test/performance/pdv/pdvPerformance.js'
    values:
      - 'test/performance/pdv/pdvPerformance.js'

  - name: 'TARGET_ENV'
    displayName: 'Target environment for configuration'
    type: string
    default: 'uat'
    values:
      - 'dev'
      - 'uat'
      - 'prod'

  - name: 'K6PERF_SCENARIO_TYPE'
    displayName: 'k6 scenario executor (ENV: K6PERF_SCENARIO_TYPE)'
    type: string
    values:
      - 'manual'
      - 'shared-iterations'
      - 'per-vu-iterations'
      - 'constant-vus'
      - 'ramping-vus'
      - 'constant-arrival-rate'
      - 'ramping-arrival-rate'

  # Applies only to staged executors: `ramping-vus` and `ramping-arrival-rate`.
  # Ignored by `manual`, `shared-iterations`, `per-vu-iterations`,
  # `constant-vus`, and `constant-arrival-rate`, which depend on other knobs
  # such as K6PERF_DURATION, K6PERF_VUS, and K6PERF_RATE.
  - name: 'K6PERF_STAGES'
    displayName: 'Optional ramp stages (ENV: K6PERF_STAGES). ‚ÑπÔ∏è Only for ramping-vus and ramping-arrival-rate scenarios.'
    type: object
    default: []

  - name: 'K6PERF_DURATION'
    displayName: 'k6 test duration (ENV: K6PERF_DURATION, e.g. 30s, 1m, 10m)'
    type: string
    default: '0s'  # disabled: the helper script requires a positive duration when needed

  - name: 'K6PERF_VUS'
    displayName: 'k6 virtual users (ENV: K6PERF_VUS)'
    type: number
    default: 0  # disabled: must be overridden for VU-based scenarios

  - name: 'K6PERF_MAX_VUS'
    displayName: 'Maximum virtual users (ENV: K6PERF_MAX_VUS, required for arrival scenarios)'
    type: number
    default: 0

  - name: 'K6PERF_PRE_ALLOCATED_VUS'
    displayName: 'Pre-allocated virtual users (ENV: K6PERF_PRE_ALLOCATED_VUS)'
    type: number
    default: 0  # disabled: arrival-rate scenarios must size the pool explicitly

  - name: 'K6PERF_START_VUS'
    displayName: 'Starting virtual users for ramping scenarios (ENV: K6PERF_START_VUS)'
    type: number
    default: 0  # disabled: ramping scenarios must define start VUs

  - name: 'K6PERF_RATE'
    displayName: 'Arrival rate per time unit (ENV: K6PERF_RATE, req/s)'
    type: number
    default: 0  # disabled: arrival-rate scenarios must define an explicit rate

  - name: 'K6PERF_TIME_UNIT'
    displayName: 'Time unit for arrival rate (ENV: K6PERF_TIME_UNIT, e.g. 1s, 500ms)'
    type: string
    default: '0s'  # disabled placeholder interpreted as missing

  - name: 'K6PERF_RPS'
    displayName: 'Global requests-per-second cap (ENV: K6PERF_RPS, 0 unlimited)'
    type: number
    default: 0

  - name: 'K6PERF_ITERATIONS'
    displayName: 'Total iterations (ENV: K6PERF_ITERATIONS, 0 disables)'
    type: number
    default: 0


variables:

  - name: working-dir
    value: '.'

  - name: projectRoot
    value: $(System.DefaultWorkingDirectory)/$(working-dir)

  - name: k6_running_mode
    value: ${{ parameters.k6_running_mode }}

  - name: ComputedPipelineName
    value: ''

  # comma separated list of k6 scripts to execute
  - name: SCRIPTS_TO_EXECUTE
    value: ${{ parameters.K6_SCRIPT_PATH }}

  - ${{ if eq(parameters.TARGET_ENV, 'dev') }}:
      - name: selfHostedAgentPool
        value: cstar-dev-perf-linux
  - ${{ elseif eq(parameters.TARGET_ENV, 'uat') }}:
      - name: selfHostedAgentPool
        value: cstar-uat-perf-linux
  - ${{ else }}:
      - name: selfHostedAgentPool
        value: cstar-prod-perf-linux

  - name: xk6CacheKey
    value: '"xk6" | "1.3.0" | dotenv'

jobs:
  - template: templates/prepare-pipeline-metadata.yml
    parameters:
      pipelineNamePrefix: ${{ parameters.PIPELINE_NAME_PREFIX }}
      k6ScriptPath: ${{ parameters.K6_SCRIPT_PATH }}
      k6ScenarioType: ${{ parameters.K6PERF_SCENARIO_TYPE }}
      targetEnv: ${{ parameters.TARGET_ENV }}

  - job: ValidateParameters
    displayName: '‚úÖ Validating k6 configuration for ${{ parameters.TARGET_ENV }}'
    dependsOn:
      - PreparePipelineMetadata
    pool:
      vmImage: ubuntu-22.04
    steps:
      - checkout: self

      - script: |
          set -euo pipefail

          header_divider=$(printf '%0.s-' {1..24})
          value_divider=$(printf '%0.s-' {1..60})

          printf '%-24s | %s\n' 'PARAMETER' 'VALUE'
          printf '%s-+-%s\n' "$header_divider" "$value_divider"

          printf '%-24s | %s\n' 'k6_running_mode' "${K6_RUNNING_MODE}"
          printf '%-24s | %s\n' 'K6_SCRIPT_PATH' "${K6_SCRIPT_PATH}"
          printf '%-24s | %s\n' 'TARGET_ENV' "${TARGET_ENV}"
          printf '%-24s | %s\n' 'PIPELINE_NAME_PREFIX' "${PIPELINE_NAME_PREFIX}"
          printf '%-24s | %s\n' 'K6PERF_SCENARIO_TYPE' "${K6PERF_SCENARIO_TYPE}"
          printf '%-24s | %s\n' 'K6PERF_DURATION' "${K6PERF_DURATION}"
          printf '%-24s | %s\n' 'K6PERF_VUS' "${K6PERF_VUS}"
          printf '%-24s | %s\n' 'K6PERF_MAX_VUS' "${K6PERF_MAX_VUS}"
          printf '%-24s | %s\n' 'K6PERF_PRE_ALLOCATED_VUS' "${K6PERF_PRE_ALLOCATED_VUS}"
          printf '%-24s | %s\n' 'K6PERF_START_VUS' "${K6PERF_START_VUS}"
          printf '%-24s | %s\n' 'K6PERF_RATE' "${K6PERF_RATE}"
          printf '%-24s | %s\n' 'K6PERF_TIME_UNIT' "${K6PERF_TIME_UNIT}"
          printf '%-24s | %s\n' 'K6PERF_RPS' "${K6PERF_RPS}"
          printf '%-24s | %s\n' 'K6PERF_ITERATIONS' "${K6PERF_ITERATIONS}"
          printf '%-24s | %s\n' 'K6PERF_STAGES' "${K6PERF_STAGES_JSON}"
          printf '%-24s | %s\n' 'COMPUTED_RUN_NAME' "${COMPUTED_PIPELINE_NAME}"
        displayName: 'üîç Pipeline parameters snapshot'
        env:
          K6_RUNNING_MODE: ${{ parameters.k6_running_mode }}
          K6_SCRIPT_PATH: ${{ parameters.K6_SCRIPT_PATH }}
          TARGET_ENV: ${{ parameters.TARGET_ENV }}
          PIPELINE_NAME_PREFIX: ${{ parameters.PIPELINE_NAME_PREFIX }}
          K6PERF_SCENARIO_TYPE: ${{ parameters.K6PERF_SCENARIO_TYPE }}
          K6PERF_DURATION: ${{ parameters.K6PERF_DURATION }}
          K6PERF_VUS: ${{ parameters.K6PERF_VUS }}
          K6PERF_MAX_VUS: ${{ parameters.K6PERF_MAX_VUS }}
          K6PERF_PRE_ALLOCATED_VUS: ${{ parameters.K6PERF_PRE_ALLOCATED_VUS }}
          K6PERF_START_VUS: ${{ parameters.K6PERF_START_VUS }}
          K6PERF_RATE: ${{ parameters.K6PERF_RATE }}
          K6PERF_TIME_UNIT: ${{ parameters.K6PERF_TIME_UNIT }}
          K6PERF_RPS: ${{ parameters.K6PERF_RPS }}
          K6PERF_ITERATIONS: ${{ parameters.K6PERF_ITERATIONS }}
          K6PERF_STAGES_JSON: ${{ convertToJson(parameters.K6PERF_STAGES) }}
          COMPUTED_PIPELINE_NAME: $(ComputedPipelineName)

      - ${{ each k6Script in split(variables.SCRIPTS_TO_EXECUTE, ',') }}:
          - script: |
              node .devops/scripts/validate_scenario.mjs
            displayName: '‚úÖ Validate scenario via scenarioSetup.js'
            condition: ne(variables.k6_running_mode, 'simple')
            env:
              TARGET_ENV: ${{ parameters.TARGET_ENV }}
              K6PERF_SCENARIO_TYPE: ${{ parameters.K6PERF_SCENARIO_TYPE }}
              K6PERF_DURATION: ${{ parameters.K6PERF_DURATION }}
              K6PERF_ITERATIONS: ${{ parameters.K6PERF_ITERATIONS }}
              K6PERF_VUS: ${{ parameters.K6PERF_VUS }}
              K6PERF_RATE: ${{ parameters.K6PERF_RATE }}
              K6PERF_TIME_UNIT: ${{ parameters.K6PERF_TIME_UNIT }}
              K6PERF_RPS: ${{ parameters.K6PERF_RPS }}
              K6PERF_START_VUS: ${{ parameters.K6PERF_START_VUS }}
              K6PERF_PRE_ALLOCATED_VUS: ${{ parameters.K6PERF_PRE_ALLOCATED_VUS }}
              K6PERF_MAX_VUS: ${{ parameters.K6PERF_MAX_VUS }}
              ${{ if gt(length(parameters.K6PERF_STAGES), 0) }}:
                K6PERF_STAGES_JSON: ${{ convertToJson(parameters.K6PERF_STAGES) }}

  - template: templates\xk6-build.yml
    parameters:
      xk6CacheKey: '$(xk6CacheKey)'
      k6Version: v1.3.0
      dependsOn: 'ValidateParameters'

  - job: simplePerformanceRun
    displayName: '‚ö° Simple k6 run on ${{ parameters.TARGET_ENV }}'
    timeoutInMinutes: 0
    continueOnError: true
    dependsOn:
      - xk6Build
      - ValidateParameters
    condition: eq(variables.k6_running_mode, 'simple')
    pool:
      name: $(selfHostedAgentPool)
    steps:

      - checkout: self

      - task: Cache@2
        inputs:
          key: '$(xk6CacheKey)'
          path: '$(Build.SourcesDirectory)'
        displayName: Retrieve xk6 from Cache

      - ${{ each k6Script in split(variables.SCRIPTS_TO_EXECUTE, ',') }}:
          - script: |
              set -euo pipefail

              script_path="${{ k6Script }}"
              if [[ -z "$script_path" ]]; then
                  echo "‚ùå k6Script value is empty" >&2
                  exit 1
              fi

              if [[ ! -f "$script_path" ]]; then
                  echo "‚ùå Script '$script_path' not found" >&2
                  exit 1
              fi

              if [[ ! -x ./xk6 ]]; then
                  echo "‚ùå ./xk6 binary not found. Ensure the xk6 build stage completed successfully." >&2
                  exit 1
              fi

              target_env="${TARGET_ENV:-}"
              scenario_type="${K6PERF_SCENARIO_TYPE:-}"

              if [[ -z "$target_env" ]]; then
                  echo "‚ùå TARGET_ENV must be provided" >&2
                  exit 1
              fi

              if [[ -z "$scenario_type" ]]; then
                  echo "‚ùå K6PERF_SCENARIO_TYPE must be provided" >&2
                  exit 1
              fi

              echo "‚ñ∂Ô∏è Simple mode for script: $script_path"

              printf 'Environment variables:\n'
              keys=(
                  TARGET_ENV
                  K6PERF_SCENARIO_TYPE
                  K6PERF_DURATION
                  K6PERF_ITERATIONS
                  K6PERF_VUS
                  K6PERF_RPS
                  K6PERF_RATE
                  K6PERF_TIME_UNIT
                  K6PERF_START_VUS
                  K6PERF_PRE_ALLOCATED_VUS
                  K6PERF_MAX_VUS
                  K6PERF_STAGES_JSON
              )
              for key in "${keys[@]}"; do
                  value="${!key-}"
                  if [[ -n "$value" ]]; then
                      printf '  %s=%s\n' "$key" "$value"
                  else
                      printf '  %s=<unset>\n' "$key"
                  fi
              done

              if [[ -n "${K6PERF_STAGES_JSON:-}" && "${K6PERF_STAGES_JSON}" != '[]' && "${K6PERF_STAGES_JSON}" != 'null' ]]; then
                  echo "‚ÑπÔ∏è K6PERF_STAGES will be consumed by the script under test."
              fi

              cmd=(./xk6 run "$script_path")
              printf '‚ñ∂Ô∏è Executing: '
              printf '%q ' "${cmd[@]}"
              printf '\n'
              "${cmd[@]}"
            displayName: '‚ñ∂Ô∏è Run ${{ k6Script }} (simple mode)'
            env:
              TARGET_ENV: ${{ parameters.TARGET_ENV }}
              K6PERF_SCENARIO_TYPE: ${{ parameters.K6PERF_SCENARIO_TYPE }}
              K6PERF_DURATION: ${{ parameters.K6PERF_DURATION }}
              K6PERF_ITERATIONS: ${{ parameters.K6PERF_ITERATIONS }}
              K6PERF_VUS: ${{ parameters.K6PERF_VUS }}
              K6PERF_RATE: ${{ parameters.K6PERF_RATE }}
              K6PERF_TIME_UNIT: ${{ parameters.K6PERF_TIME_UNIT }}
              K6PERF_RPS: ${{ parameters.K6PERF_RPS }}
              K6PERF_START_VUS: ${{ parameters.K6PERF_START_VUS }}
              K6PERF_PRE_ALLOCATED_VUS: ${{ parameters.K6PERF_PRE_ALLOCATED_VUS }}
              K6PERF_MAX_VUS: ${{ parameters.K6PERF_MAX_VUS }}
              K6PERF_STAGES_JSON: ${{ convertToJson(parameters.K6PERF_STAGES) }}

  - job: managedPerformanceTests
    displayName: '‚úàÔ∏è Managed k6 scripts on ${{ parameters.TARGET_ENV }}'
    timeoutInMinutes: 0
    continueOnError: true
    dependsOn:
      - xk6Build
      - ValidateParameters
    condition: eq(variables.k6_running_mode, 'managed')
    pool:
      name: $(selfHostedAgentPool)
    steps:

      - script: |
          docker info | grep -i mem
        displayName: Display Docker Memory Info

      - script: |
          mkdir -p results
        displayName: Create results folder

      - task: Cache@2
        inputs:
          key: '$(xk6CacheKey)'
          path: '$(Build.SourcesDirectory)'
        displayName: Retrieve xk6 from Cache

      - ${{ each k6Script in split(variables.SCRIPTS_TO_EXECUTE, ',') }}:
          - script: |
              python3 .devops/scripts/run_k6.py --script "${{ k6Script }}"
            env:
              TARGET_ENV: ${{ parameters.TARGET_ENV }}
              K6PERF_SCENARIO_TYPE: ${{ parameters.K6PERF_SCENARIO_TYPE }}
              K6PERF_DURATION: ${{ parameters.K6PERF_DURATION }}
              K6PERF_ITERATIONS: ${{ parameters.K6PERF_ITERATIONS }}
              K6PERF_VUS: ${{ parameters.K6PERF_VUS }}
              K6PERF_RATE: ${{ parameters.K6PERF_RATE }}
              K6PERF_TIME_UNIT: ${{ parameters.K6PERF_TIME_UNIT }}
              K6PERF_RPS: ${{ parameters.K6PERF_RPS }}
              K6PERF_START_VUS: ${{ parameters.K6PERF_START_VUS }}
              K6PERF_PRE_ALLOCATED_VUS: ${{ parameters.K6PERF_PRE_ALLOCATED_VUS }}
              K6PERF_MAX_VUS: ${{ parameters.K6PERF_MAX_VUS }}
              ${{ if gt(length(parameters.K6PERF_STAGES), 0) }}:
                K6PERF_STAGES_PARAM: ${{ convertToJson(parameters.K6PERF_STAGES) }}
            timeoutInMinutes: 0
            displayName: 'üöÄ Run k6 script ${{ k6Script }}'

      - task: PublishPipelineArtifact@1
        displayName: 'Publishing results of k6 tests in folder: results'
        condition: true
        inputs:
          artifact: 'results'
          targetPath: 'results'
          publishLocation: 'pipeline'

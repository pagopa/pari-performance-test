# Generic pipeline to execute k6 scripts with environment-driven configuration

trigger: none

pool:
  vmImage: ubuntu-22.04

parameters:

  - name: 'PIPELINE_NAME_PREFIX'
    displayName: '(Optional) pipeline run name prefix'
    type: string
    default: '-'

  - name: 'k6_running_mode'
    displayName: 'k6 execution mode'
    type: string
    default: 'simple'
    values:
      - 'simple'
      - 'managed'

  - name: 'K6_SCRIPT_PATH'
    displayName: 'k6 script path to execute'
    type: string
    default: 'test/performance/pdv/pdvPerformance.js'
    values:
      - 'test/performance/pdv/pdvPerformance.js'

  - name: 'TARGET_ENV'
    displayName: 'Target environment for configuration'
    type: string
    default: 'uat'
    values:
      - 'dev'
      - 'uat'
      - 'prod'

  - name: 'K6_SCENARIO_TYPE'
    displayName: 'k6 scenario executor (ENV: K6_SCENARIO_TYPE)'
    type: string
    values:
      - 'manual'
      - 'shared-iterations'
      - 'per-vu-iterations'
      - 'constant-vus'
      - 'ramping-vus'
      - 'constant-arrival-rate'
      - 'ramping-arrival-rate'

  # Applies only to staged executors: `ramping-vus` and `ramping-arrival-rate`.
  # Ignored by `manual`, `shared-iterations`, `per-vu-iterations`,
  # `constant-vus`, and `constant-arrival-rate`, which depend on other knobs
  # such as K6_DURATION, K6_VUS, and K6_RATE.
  - name: 'K6_STAGES'
    displayName: 'Optional ramp stages (ENV: K6_STAGES). ‚ÑπÔ∏è Only for ramping-vus and ramping-arrival-rate scenarios.'
    type: object
    default: []

  - name: 'K6_DURATION'
    displayName: 'k6 test duration (ENV: K6_DURATION, CLI: --duration, e.g. 30s, 1m, 10m)'
    type: string
    default: '0s'  # disabled: the helper script requires a positive duration when needed

  - name: 'K6_VUS'
    displayName: 'k6 virtual users (ENV: K6_VUS, CLI: --vus)'
    type: number
    default: 0  # disabled: must be overridden for VU-based scenarios

  - name: 'K6_MAX_VUS'
    displayName: 'Maximum virtual users (ENV: K6_MAX_VUS, required for arrival scenarios)'
    type: number
    default: 0

  - name: 'K6_PRE_ALLOCATED_VUS'
    displayName: 'Pre-allocated virtual users (ENV: K6_PRE_ALLOCATED_VUS)'
    type: number
    default: 0  # disabled: arrival-rate scenarios must size the pool explicitly

  - name: 'K6_START_VUS'
    displayName: 'Starting virtual users for ramping scenarios (ENV: K6_START_VUS)'
    type: number
    default: 0  # disabled: ramping scenarios must define start VUs

  - name: 'K6_RATE'
    displayName: 'Arrival rate per time unit (ENV: K6_RATE, req/s)'
    type: number
    default: 0  # disabled: arrival-rate scenarios must define an explicit rate

  - name: 'K6_TIME_UNIT'
    displayName: 'Time unit for arrival rate (ENV: K6_TIME_UNIT, e.g. 1s, 500ms)'
    type: string
    default: '0s'  # disabled placeholder interpreted as missing

  - name: 'K6_RPS'
    displayName: 'Global requests-per-second cap (ENV: K6_RPS,CLI: --rps, 0 unlimited)'
    type: number
    default: 0

  - name: 'K6_ITERATIONS'
    displayName: 'Total iterations (ENV: K6_ITERATIONS, CLI: --iterations, 0 disables)'
    type: number
    default: 0


variables:

  - name: working-dir
    value: '.'

  - name: projectRoot
    value: $(System.DefaultWorkingDirectory)/$(working-dir)

  - name: k6_running_mode
    value: ${{ parameters.k6_running_mode }}

  - name: ComputedPipelineName
    value: ''

  # comma separated list of k6 scripts to execute
  - name: SCRIPTS_TO_EXECUTE
    value: ${{ parameters.K6_SCRIPT_PATH }}

  - ${{ if eq(parameters.TARGET_ENV, 'dev') }}:
      - name: selfHostedAgentPool
        value: cstar-dev-perf-linux
  - ${{ elseif eq(parameters.TARGET_ENV, 'uat') }}:
      - name: selfHostedAgentPool
        value: cstar-uat-perf-linux
  - ${{ else }}:
      - name: selfHostedAgentPool
        value: cstar-prod-perf-linux

  - name: xk6CacheKey
    value: '"xk6" | "1.3.0" | dotenv'

jobs:
  - job: PreparePipelineMetadata
    displayName: 'üßæ Prepare pipeline metadata'
    dependsOn: []
    pool:
      vmImage: ubuntu-22.04
    steps:
      - bash: |
          set -euo pipefail

          prefix="${PIPELINE_NAME_PREFIX:-}"
          if [[ "$prefix" == "-" ]]; then
            prefix=""
          fi
          scenario="${K6_SCENARIO_TYPE:-}"
          environment="${TARGET_ENV:-}"
          script_path="${K6_SCRIPT_PATH:-}"

          build_number_source="${BUILD_BUILDNUMBER:-}"
          date_part=""
          run_part=""
          if [[ "$build_number_source" =~ ^([0-9]{8})\.([0-9]+) ]]; then
            date_part="${BASH_REMATCH[1]}"
            run_part="${BASH_REMATCH[2]}"
          fi
          if [[ -z "$date_part" || -z "$run_part" ]]; then
            date_part="$(date -u +%Y%m%d)"
            build_id="${BUILD_BUILDID:-0}"
            run_candidate=$(( build_id % 100 ))
            run_part="$(printf '%02d' "$run_candidate")"
          fi
          build_number_formatted="${date_part}.${run_part}"
          auto_prefix_raw="#${build_number_formatted} ‚Ä¢"

          base="${script_path##*/}"
          base="${base%.js}"

          sanitize() {
            local raw="$1"
            local fallback="$2"
            local cleaned
            cleaned="$(printf '%s' "$raw" | sed -E 's/[^A-Za-z0-9._-]+/-/g; s/^-+//; s/-+$//; s/-{2,}/-/g')"
            if [[ -z "$cleaned" ]]; then
              cleaned="$fallback"
            fi
            printf '%s' "$cleaned"
          }

          base_safe="$(sanitize "$base" "k6-script")"
          scenario_safe="$(sanitize "$scenario" "scenario")"
          environment_safe="$(sanitize "$environment" "env")"
          prefix_safe="$(sanitize "$prefix" "custom")"
          auto_prefix_safe="$(sanitize "$auto_prefix_raw" "run")"

          if [[ -n "$prefix" ]]; then
            core_segment="${prefix_safe}-${environment_safe}-${scenario_safe}-${base_safe}"
          else
            core_segment="${environment_safe}-${scenario_safe}-${base_safe}"
          fi
          name="${auto_prefix_safe}-${core_segment}"

          max_length=256
          if (( ${#name} > max_length )); then
            truncated="${name:0:max_length}"
            while [[ "${truncated: -1}" == "-" ]]; do
              truncated="${truncated::-1}"
            done
            if [[ -z "$truncated" ]]; then
              truncated="${name:0:max_length}"
            fi
            echo "WARNING: Computed pipeline name exceeds ${max_length} characters. Truncating to '${truncated}'."
            name="$truncated"
          fi

          emoji_segments=()
          emoji_segments+=("üóìÔ∏è ${auto_prefix_raw}")
          if [[ -n "$prefix" ]]; then
            emoji_segments+=("üè∑Ô∏è ${prefix_safe}")
          fi
          emoji_segments+=("üåç ${environment_safe}")
          emoji_segments+=("üéØ ${scenario_safe}")
          emoji_segments+=("üìú ${base_safe}")

          display_name="${auto_prefix_raw} ${core_segment}"

          printf 'Segments -> %s\n' "$(IFS=' | '; echo "${emoji_segments[*]}")"
          echo "Display pipeline run name -> ${display_name}"
          echo "Sanitized pipeline run name -> $name"
          echo "##vso[task.setvariable variable=ComputedPipelineName]$name"
          echo "##vso[task.setvariable variable=ComputedPipelineName;isOutput=true]$name"
          echo "##vso[build.updatebuildnumber]$name"
        name: ComposePipelineVar
        displayName: 'üßæ Compose pipeline run name'
        env:
          PIPELINE_NAME_PREFIX: ${{ parameters.PIPELINE_NAME_PREFIX }}
          K6_SCRIPT_PATH: ${{ parameters.K6_SCRIPT_PATH }}
          K6_SCENARIO_TYPE: ${{ parameters.K6_SCENARIO_TYPE }}
          TARGET_ENV: ${{ parameters.TARGET_ENV }}

  - template: templates\xk6-build.yml
    parameters:
      xk6CacheKey: '$(xk6CacheKey)'
      k6Version: v1.3.0

  - job: ValidateParameters
    displayName: '‚úÖ Validating k6 configuration for ${{ parameters.TARGET_ENV }}'
    dependsOn:
      - PreparePipelineMetadata
    pool:
      vmImage: ubuntu-22.04
    steps:
      - checkout: self

      - script: |
          set -euo pipefail

          header_divider=$(printf '%0.s-' {1..24})
          value_divider=$(printf '%0.s-' {1..60})

          printf '%-24s | %s\n' 'PARAMETER' 'VALUE'
          printf '%s-+-%s\n' "$header_divider" "$value_divider"

          printf '%-24s | %s\n' 'k6_running_mode' "${K6_RUNNING_MODE}"
          printf '%-24s | %s\n' 'K6_SCRIPT_PATH' "${K6_SCRIPT_PATH}"
          printf '%-24s | %s\n' 'TARGET_ENV' "${TARGET_ENV}"
          printf '%-24s | %s\n' 'PIPELINE_NAME_PREFIX' "${PIPELINE_NAME_PREFIX}"
          printf '%-24s | %s\n' 'K6_SCENARIO_TYPE' "${K6_SCENARIO_TYPE}"
          printf '%-24s | %s\n' 'K6_DURATION' "${K6_DURATION}"
          printf '%-24s | %s\n' 'K6_VUS' "${K6_VUS}"
          printf '%-24s | %s\n' 'K6_MAX_VUS' "${K6_MAX_VUS}"
          printf '%-24s | %s\n' 'K6_PRE_ALLOCATED_VUS' "${K6_PRE_ALLOCATED_VUS}"
          printf '%-24s | %s\n' 'K6_START_VUS' "${K6_START_VUS}"
          printf '%-24s | %s\n' 'K6_RATE' "${K6_RATE}"
          printf '%-24s | %s\n' 'K6_TIME_UNIT' "${K6_TIME_UNIT}"
          printf '%-24s | %s\n' 'K6_RPS' "${K6_RPS}"
          printf '%-24s | %s\n' 'K6_ITERATIONS' "${K6_ITERATIONS}"
          printf '%-24s | %s\n' 'K6_STAGES' "${K6_STAGES_JSON}"
          printf '%-24s | %s\n' 'COMPUTED_RUN_NAME' "${COMPUTED_PIPELINE_NAME}"
        displayName: 'üîç Pipeline parameters snapshot'
        env:
          K6_RUNNING_MODE: ${{ parameters.k6_running_mode }}
          K6_SCRIPT_PATH: ${{ parameters.K6_SCRIPT_PATH }}
          TARGET_ENV: ${{ parameters.TARGET_ENV }}
          PIPELINE_NAME_PREFIX: ${{ parameters.PIPELINE_NAME_PREFIX }}
          K6_SCENARIO_TYPE: ${{ parameters.K6_SCENARIO_TYPE }}
          K6_DURATION: ${{ parameters.K6_DURATION }}
          K6_VUS: ${{ parameters.K6_VUS }}
          K6_MAX_VUS: ${{ parameters.K6_MAX_VUS }}
          K6_PRE_ALLOCATED_VUS: ${{ parameters.K6_PRE_ALLOCATED_VUS }}
          K6_START_VUS: ${{ parameters.K6_START_VUS }}
          K6_RATE: ${{ parameters.K6_RATE }}
          K6_TIME_UNIT: ${{ parameters.K6_TIME_UNIT }}
          K6_RPS: ${{ parameters.K6_RPS }}
          K6_ITERATIONS: ${{ parameters.K6_ITERATIONS }}
          K6_STAGES_JSON: ${{ convertToJson(parameters.K6_STAGES) }}
          COMPUTED_PIPELINE_NAME: $(ComputedPipelineName)

      - ${{ each k6Script in split(variables.SCRIPTS_TO_EXECUTE, ',') }}:
          - script: |
              python3 .devops/scripts/run_k6.py --script "${{ k6Script }}" --dry-run
            displayName: üìå Validate parameters for ${{ k6Script }}
            condition: ne(variables.k6_running_mode, 'simple')
            env:
              TARGET_ENV: ${{ parameters.TARGET_ENV }}
              K6_SCENARIO_TYPE: ${{ parameters.K6_SCENARIO_TYPE }}
              K6_DURATION: ${{ parameters.K6_DURATION }}
              K6_ITERATIONS: ${{ parameters.K6_ITERATIONS }}
              K6_VUS: ${{ parameters.K6_VUS }}
              K6_RATE: ${{ parameters.K6_RATE }}
              K6_TIME_UNIT: ${{ parameters.K6_TIME_UNIT }}
              K6_RPS: ${{ parameters.K6_RPS }}
              K6_START_VUS: ${{ parameters.K6_START_VUS }}
              K6_PRE_ALLOCATED_VUS: ${{ parameters.K6_PRE_ALLOCATED_VUS }}
              K6_MAX_VUS: ${{ parameters.K6_MAX_VUS }}
              ${{ if gt(length(parameters.K6_STAGES), 0) }}:
                K6_STAGES_PARAM: ${{ convertToJson(parameters.K6_STAGES) }}

  - job: simplePerformanceRun
    displayName: '‚ö° Simple k6 run on ${{ parameters.TARGET_ENV }}'
    timeoutInMinutes: 0
    continueOnError: true
    dependsOn:
      - xk6Build
      - ValidateParameters
    condition: eq(variables.k6_running_mode, 'simple')
    pool:
      name: $(selfHostedAgentPool)
    steps:

      - checkout: self

      - task: Cache@2
        inputs:
          key: '$(xk6CacheKey)'
          path: '$(Build.SourcesDirectory)'
        displayName: Retrieve xk6 from Cache

      - ${{ each k6Script in split(variables.SCRIPTS_TO_EXECUTE, ',') }}:
          - script: |
              set -euo pipefail

              script_path="${{ k6Script }}"
              if [[ -z "$script_path" ]]; then
                  echo "‚ùå k6Script value is empty" >&2
                  exit 1
              fi

              if [[ ! -f "$script_path" ]]; then
                  echo "‚ùå Script '$script_path' not found" >&2
                  exit 1
              fi

              if [[ ! -x ./xk6 ]]; then
                  echo "‚ùå ./xk6 binary not found. Ensure the xk6 build stage completed successfully." >&2
                  exit 1
              fi

              target_env="${TARGET_ENV:-}"
              scenario_type="${K6_SCENARIO_TYPE:-}"

              if [[ -z "$target_env" ]]; then
                  echo "‚ùå TARGET_ENV must be provided" >&2
                  exit 1
              fi

              if [[ -z "$scenario_type" ]]; then
                  echo "‚ùå K6_SCENARIO_TYPE must be provided" >&2
                  exit 1
              fi

              cli_cmd=("./xk6" "run" "$script_path" "--tag" "environment=${target_env}")
              env_vars=("TARGET_ENV=${target_env}" "K6_SCENARIO_TYPE=${scenario_type}")

              add_cli() {
                  local flag="$1"
                  local env_key="$2"
                  shift 2
                  local value="${!env_key-}"
                  if [[ -z "${value-}" ]]; then
                      unset "$env_key"
                      return
                  fi
                  for default in "$@"; do
                      if [[ "$value" == "$default" ]]; then
                          unset "$env_key"
                          return
                      fi
                  done
                  cli_cmd+=("$flag" "$value")
              }

              add_env() {
                  local env_key="$1"
                  shift
                  local value="${!env_key-}"
                  if [[ -z "${value-}" ]]; then
                      unset "$env_key"
                      return
                  fi
                  for default in "$@"; do
                      if [[ "$value" == "$default" ]]; then
                          unset "$env_key"
                          return
                      fi
                  done
                  env_vars+=("${env_key}=${value}")
              }

              add_cli "--duration" "K6_DURATION" "0" "0s"
              add_cli "--vus" "K6_VUS" "0"
              add_cli "--iterations" "K6_ITERATIONS" "0"
              add_cli "--rps" "K6_RPS" "0"

              add_env "K6_MAX_VUS" "0"
              add_env "K6_PRE_ALLOCATED_VUS" "0"
              add_env "K6_START_VUS" "0"
              add_env "K6_RATE" "0"
              add_env "K6_TIME_UNIT" "0" "0s"

              stages_json="${K6_STAGES_JSON:-}"
              if [[ -n "$stages_json" && "$stages_json" != '[]' && "$stages_json" != 'null' ]]; then
                  echo "‚ÑπÔ∏è K6_STAGES is ignored in simple mode"
              fi
              unset K6_STAGES_JSON

              echo "‚ñ∂Ô∏è Simple mode for script: $script_path"

              printf 'CLI command:\n'
              printf '  '
              printf '%q ' "${cli_cmd[@]}"
              printf '\n'

              printf 'Environment overrides:\n'
              if ((${#env_vars[@]} > 0)); then
                  for entry in "${env_vars[@]}"; do
                      printf '  %s\n' "$entry"
                  done
              else
                  printf '  (none)\n'
              fi


              if ((${#env_vars[@]} > 0)); then
                  printf 'üöÄ Executing with env: '
                  printf '%q ' "${env_vars[@]}" "${cli_cmd[@]}"
                  printf '\n'
                  # env xyz.. permette di eseguire il comando con le variabili d'ambiente specificate caricandole prima
                  env "${env_vars[@]}" "${cli_cmd[@]}"
              else
                  printf '‚ñ∂Ô∏è Executing: '
                  printf '%q ' "${cli_cmd[@]}"
                  printf '\n'
                  "${cli_cmd[@]}"
              fi
            displayName: '‚ñ∂Ô∏è Run ${{ k6Script }} (simple mode)'
            env:
              TARGET_ENV: ${{ parameters.TARGET_ENV }}
              K6_SCENARIO_TYPE: ${{ parameters.K6_SCENARIO_TYPE }}
              K6_DURATION: ${{ parameters.K6_DURATION }}
              K6_ITERATIONS: ${{ parameters.K6_ITERATIONS }}
              K6_VUS: ${{ parameters.K6_VUS }}
              K6_RATE: ${{ parameters.K6_RATE }}
              K6_TIME_UNIT: ${{ parameters.K6_TIME_UNIT }}
              K6_RPS: ${{ parameters.K6_RPS }}
              K6_START_VUS: ${{ parameters.K6_START_VUS }}
              K6_PRE_ALLOCATED_VUS: ${{ parameters.K6_PRE_ALLOCATED_VUS }}
              K6_MAX_VUS: ${{ parameters.K6_MAX_VUS }}
              K6_STAGES_JSON: ${{ convertToJson(parameters.K6_STAGES) }}

  - job: managedPerformanceTests
    displayName: '‚úàÔ∏è Managed k6 scripts on ${{ parameters.TARGET_ENV }}'
    timeoutInMinutes: 0
    continueOnError: true
    dependsOn:
      - xk6Build
      - ValidateParameters
    condition: eq(variables.k6_running_mode, 'managed')
    pool:
      name: $(selfHostedAgentPool)
    steps:

      - script: |
          docker info | grep -i mem
        displayName: Display Docker Memory Info

      - script: |
          mkdir -p results
        displayName: Create results folder

      - task: Cache@2
        inputs:
          key: '$(xk6CacheKey)'
          path: '$(Build.SourcesDirectory)'
        displayName: Retrieve xk6 from Cache

      - ${{ each k6Script in split(variables.SCRIPTS_TO_EXECUTE, ',') }}:
          - script: |
              python3 .devops/scripts/run_k6.py --script "${{ k6Script }}"
            env:
              TARGET_ENV: ${{ parameters.TARGET_ENV }}
              K6_SCENARIO_TYPE: ${{ parameters.K6_SCENARIO_TYPE }}
              K6_DURATION: ${{ parameters.K6_DURATION }}
              K6_ITERATIONS: ${{ parameters.K6_ITERATIONS }}
              K6_VUS: ${{ parameters.K6_VUS }}
              K6_RATE: ${{ parameters.K6_RATE }}
              K6_TIME_UNIT: ${{ parameters.K6_TIME_UNIT }}
              K6_RPS: ${{ parameters.K6_RPS }}
              K6_START_VUS: ${{ parameters.K6_START_VUS }}
              K6_PRE_ALLOCATED_VUS: ${{ parameters.K6_PRE_ALLOCATED_VUS }}
              K6_MAX_VUS: ${{ parameters.K6_MAX_VUS }}
              ${{ if gt(length(parameters.K6_STAGES), 0) }}:
                K6_STAGES_PARAM: ${{ convertToJson(parameters.K6_STAGES) }}
            timeoutInMinutes: 0
            displayName: 'üöÄ Run k6 script ${{ k6Script }}'

      - task: PublishPipelineArtifact@1
        displayName: 'Publishing results of k6 tests in folder: results'
        condition: true
        inputs:
          artifact: 'results'
          targetPath: 'results'
          publishLocation: 'pipeline'

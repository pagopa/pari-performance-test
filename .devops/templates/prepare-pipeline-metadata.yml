parameters:
  - name: pipelineNamePrefix
    type: string
    displayName: 'Pipeline run name prefix from manual input (use "-" to skip)'
    default: '-'
  - name: k6ScriptPath
    type: string
    displayName: 'k6 script path used to derive the fallback name segment'
  - name: k6ScenarioType
    type: string
    displayName: 'k6 scenario type (mandatory segment for naming)'
  - name: targetEnv
    type: string
    displayName: 'Deployment environment tag (mandatory segment for naming)'

# This template prepares a standardized pipeline run name to keep Azure DevOps
# build numbers consistent and human readable. It always prefixes the name
# with the date/run number (e.g., #20251007.41 •) and appends environment,
# scenario, and script segments. The computed value is sanitized to comply with
# Azure DevOps restrictions and stored in the ComputedPipelineName variable,
# which is then used to update the build number for the rest of the pipeline.
jobs:
  - job: PreparePipelineMetadata
    displayName: '🧾 Prepare pipeline metadata'
    dependsOn: []
    pool:
      vmImage: ubuntu-22.04
    steps:
      - bash: |
          set -euo pipefail

          prefix_name="${PIPELINE_NAME_PREFIX:-}"
          if [[ "$prefix_name" == "-" ]]; then
            prefix_name=""
          fi
          scenario="${K6PERF_SCENARIO_TYPE:-}"
          environment="${TARGET_ENV:-}"
          script_path="${K6_SCRIPT_PATH:-}"

          build_number_source="${BUILD_BUILDNUMBER:-}"
          date_part=""
          run_part=""
          if [[ "$build_number_source" =~ ^([0-9]{8})\.([0-9]+) ]]; then
            date_part="${BASH_REMATCH[1]}"
            run_part="${BASH_REMATCH[2]}"
          fi
          if [[ -z "$date_part" || -z "$run_part" ]]; then
            date_part="$(date -u +%Y%m%d)"
            build_id="${BUILD_BUILDID:-0}"
            run_candidate=$(( build_id % 100 ))
            run_part="$(printf '%02d' "$run_candidate")"
          fi
          build_number_formatted="${date_part}.${run_part}"
          build_number_raw="#${build_number_formatted} •"

          base="${script_path##*/}"
          base="${base%.js}"

          sanitize() {
            local raw="$1"
            local fallback="$2"
            local cleaned
            cleaned="$(printf '%s' "$raw" | sed -E 's/[^A-Za-z0-9._-]+/-/g; s/^-+//; s/-+$//; s/-{2,}/-/g')"
            if [[ -z "$cleaned" ]]; then
              cleaned="$fallback"
            fi
            printf '%s' "$cleaned"
          }

          base_safe="$(sanitize "$base" "k6-script")"
          scenario_safe="$(sanitize "$scenario" "scenario")"
          environment_safe="$(sanitize "$environment" "env")"
          prefix_name_safe="$(sanitize "$prefix_name" "custom")"
          build_number_safe="$(sanitize "$build_number_raw" "run")"

          if [[ -n "$prefix_name" ]]; then
            core_segment="${prefix_name_safe} • ${environment_safe}_${scenario_safe}_${base_safe}"
          else
            core_segment="${environment_safe}_${scenario_safe}_${base_safe}"
          fi
          name="${build_number_safe} • ${core_segment}"

          max_length=256
          if (( ${#name} > max_length )); then
            truncated="${name:0:max_length}"
            while [[ "${truncated: -1}" == "-" ]]; do
              truncated="${truncated::-1}"
            done
            if [[ -z "$truncated" ]]; then
              truncated="${name:0:max_length}"
            fi
            echo "WARNING: Computed pipeline name exceeds ${max_length} characters. Truncating to '${truncated}'."
            name="$truncated"
          fi

          emoji_segments=()
          emoji_segments+=("🗓️ ${build_number_raw}")
          if [[ -n "$prefix_name" ]]; then
            emoji_segments+=("🏷️ ${prefix_name_safe}")
          fi
          emoji_segments+=("🌍 ${environment_safe}")
          emoji_segments+=("🎯 ${scenario_safe}")
          emoji_segments+=("📜 ${base_safe}")

          display_name="${build_number_raw} ${core_segment}"

          printf 'Segments -> %s\n' "$(IFS=' | '; echo "${emoji_segments[*]}")"
          echo "Display pipeline run name -> ${display_name}"
          echo "Sanitized pipeline run name -> $name"
          echo "##vso[task.setvariable variable=ComputedPipelineName]$name"
          echo "##vso[task.setvariable variable=ComputedPipelineName;isOutput=true]$name"
          echo "##vso[build.updatebuildnumber]$name"
        name: ComposePipelineVar
        displayName: '🧾 Compose pipeline run name'
        env:
          PIPELINE_NAME_PREFIX: ${{ parameters.pipelineNamePrefix }}
          K6_SCRIPT_PATH: ${{ parameters.k6ScriptPath }}
          K6PERF_SCENARIO_TYPE: ${{ parameters.k6ScenarioType }}
          TARGET_ENV: ${{ parameters.targetEnv }}
